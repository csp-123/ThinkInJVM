第七章 虚拟机类加载机制

    7.2 类加载时机
        有且仅有5种情况必须对类进行初始化
        1. 使用new关键字实例化对象, 读取或设置一个类的静态字段(被final修饰, 已在编译期把结果放入常量池的静态字段除外), 调用一个类的静态方法
        2. 使用 java.lang.reflect包的方法对类进行反射调用
        3. 初始化类时, 若父类未初始化, 先将父类初始化
        4. 当虚拟机启动时, 用户需要指定一个要执行的主类, 虚拟机先初始化这个主类
        5. 当使用JDK1.7的动态语言支持时, 如果一个java.lang.invoke.MethodHandle实例最后解析结果REF_getStatic, REF_putStatic, REF_invokeStatic
            的方法句柄所对应的类没有进行过初始化时, 要先初始化

    7.3 类加载过程
        加载阶段  虚拟机需要完成的3件事情
        1. 通过类的全限定名来获取定义此类的二进制字节流.
        2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构.
        3. 在内存中生成一个代表这个类的java.lang.Class对象, 作为方法区这个类的各种数据的访问入口.

    7.4 类加载器
        1. 启动类加载器(Bootstrap ClassLoader)
        2. 扩展类加载器(Extension ClassLoader)
        3. 应用程序类加载器(Application ClassLoader)